// SPDX-License-Identifier: MIT
pragma ton-solidity >= 0.62.0;
pragma AbiHeader expire;
pragma AbiHeader time;
// pragma AbiHeader pubkey;

import "../base/AsterizmClient.tsol";
import "../libs/AddressLib.tsol";
import "../libs/BytesLib.tsol";

contract AsterizmDemo is AsterizmClient {

    using AddressLib for address;
    using BytesLib for bytes;

    event SetChainMessageEvent(string message);

    string public chainMessage;

    constructor () AsterizmClient() public {
        chainMessage = "Chain message";
    }

    /// Send message
    /// @param _dstChainId uint64  Destination chain ID
    /// @param _message string  Message
    function sendMessage(uint64 _dstChainId, string _message) public {
        tvm.rawReserve(AsterizmEnvs.CLIENT__MIN_CONTRACT_BALANCE, 0);
        _initAsterizmTransferEvent(_buildClInitTransferEventDto(_dstChainId, abi.encode(_message)));
        msg.sender.transfer({ value: 0, flag: AsterizmTransferFlags.ALL_NOT_RESERVED, bounce: false });
    }

    /// Receive non-encoded payload
    /// @param _dto ClAsterizmReceiveRequestDto  Method DTO
    function _asterizmReceive(ClAsterizmReceiveRequestDto _dto) internal override {
        string message = abi.decode(_dto.payload, (string));
        chainMessage = message;
        emit SetChainMessageEvent(message);
    }

}
